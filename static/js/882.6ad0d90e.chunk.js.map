{"version":3,"file":"static/js/882.6ad0d90e.chunk.js","mappings":"sLAcA,MAAMA,EAAY,CAChBC,KAAM,eACNC,KAAM,SACNC,QAAS,eACTC,OAAQ,eACRC,MAAO,gBAoFT,EAjFsBC,KACpB,MAAOC,EAAeC,IAAoBC,EAAAA,EAAAA,UAAS,KAC5CC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCG,EAAKC,IAAUJ,EAAAA,EAAAA,UAAS,OAE/BK,EAAAA,EAAAA,YAAU,KACmBC,WACzB,MAAMC,EAAOC,EAAAA,EAAKC,YAClB,GAAKF,EAAL,CAEAH,EAAOG,EAAKJ,KAEZ,IACE,MAAMO,GAAIC,EAAAA,EAAAA,IACRC,EAAAA,EAAAA,IAAWC,EAAAA,GAAI,kBACfC,EAAAA,EAAAA,IAAM,KAAM,KAAM,CAAC,MAAOP,EAAKJ,OAC/BY,EAAAA,EAAAA,IAAQ,YAAa,SAGjBC,SADiBC,EAAAA,EAAAA,IAAQP,IACTQ,KAAKC,KAAKC,IAAGC,EAAAA,EAAAA,GAAA,CACjCC,GAAIF,EAAIE,IACLF,EAAIJ,UAETjB,EAAiBiB,EACnB,CAAE,MAAOO,GACPC,QAAQC,MAAM,gCAAiCF,EACjD,CAAC,QACCrB,GAAW,EACb,CApBiB,CAoBjB,EAGFwB,EAAoB,GACnB,IAcH,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBC,SAAA,EACjCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,+BACH5B,GACC6B,EAAAA,EAAAA,KAAA,OAAKF,UAAU,SAAQC,SAAC,6BACG,IAAzB/B,EAAciC,QAChBD,EAAAA,EAAAA,KAAA,KAAAD,SAAG,6BAEHC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,oBAAmBC,SAC9B/B,EAAcqB,KAAKa,IAAO,IAADC,EACxB,MAAMC,EAAiB,QAAXD,EAAGD,EAAEG,cAAM,IAAAF,OAAA,EAARA,EAAUG,SAASjC,GAClC,OACEwB,EAAAA,EAAAA,MAAA,MAEEC,UAAS,qBAAAS,OAAuBH,EAAS,OAAS,UAClDI,QAASA,KAAOJ,GA3BX5B,WACjB,MAAMiC,GAAWnB,EAAAA,EAAAA,IAAIP,EAAAA,GAAI,gBAAiB2B,SACpCC,EAAAA,EAAAA,IAAUF,EAAU,CACxBJ,QAAQO,EAAAA,EAAAA,IAAWvC,KAErBJ,GAAkB4C,GAChBA,EAAKxB,KAAKa,GACRA,EAAEV,KAAOkB,GAAcnB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQW,GAAC,IAAEG,OAAQ,IAAKH,EAAEG,QAAU,GAAKhC,KAAS6B,KAE5E,EAkBqCY,CAAWZ,EAAEV,IAAIO,SAAA,EAE3CC,EAAAA,EAAAA,KAAA,QAAMF,UAAU,OAAMC,SAAEtC,EAAUyC,EAAEa,OAAS,kBAC7ClB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,UAASC,SAAA,EACtBC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,QAAOC,SAAEG,EAAEc,SACxBhB,EAAAA,EAAAA,KAAA,KAAGF,UAAU,UAASC,SAAEG,EAAEe,WAC1BjB,EAAAA,EAAAA,KAAA,QAAMF,UAAU,YAAWC,SACxB,IAAImB,KAAKhB,EAAEiB,WAAWC,uBAGzBhB,IAAUJ,EAAAA,EAAAA,KAAA,QAAMF,UAAU,QAAOC,SAAC,aAZ/BG,EAAEV,GAaJ,QAKT,C","sources":["pages/Notifications.jsx"],"sourcesContent":["import  { useEffect, useState } from 'react';\r\nimport { auth, db } from '../firebase';\r\nimport {\r\n  collection,\r\n  query,\r\n  where,\r\n  getDocs,\r\n  updateDoc,\r\n  doc,\r\n  orderBy,\r\n  arrayUnion,\r\n} from 'firebase/firestore';\r\nimport './Notifications.css';\r\n\r\nconst typeIcons = {\r\n  rent: 'üßæ',\r\n  bill: '‚ö°',\r\n  receipt: 'üìÑ',\r\n  notice: 'üì¢',\r\n  alert: 'üö®',\r\n};\r\n\r\nconst Notifications = () => {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [uid, setUid] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchNotifications = async () => {\r\n      const user = auth.currentUser;\r\n      if (!user) return;\r\n\r\n      setUid(user.uid);\r\n\r\n      try {\r\n        const q = query(\r\n          collection(db, 'notifications'),\r\n          where('to', 'in', ['all', user.uid]),\r\n          orderBy('timestamp', 'desc')\r\n        );\r\n        const snapshot = await getDocs(q);\r\n        const data = snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          ...doc.data(),\r\n        }));\r\n        setNotifications(data);\r\n      } catch (err) {\r\n        console.error('Error fetching notifications:', err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchNotifications();\r\n  }, []);\r\n\r\n  const markAsRead = async (notificationId) => {\r\n    const notifRef = doc(db, 'notifications', notificationId);\r\n    await updateDoc(notifRef, {\r\n      readBy: arrayUnion(uid),\r\n    });\r\n    setNotifications((prev) =>\r\n      prev.map((n) =>\r\n        n.id === notificationId ? { ...n, readBy: [...(n.readBy || []), uid] } : n\r\n      )\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"notifications-page\">\r\n      <h2>üîî Notifications</h2>\r\n      {loading ? (\r\n        <div className=\"loader\">Loading notifications...</div>\r\n      ) : notifications.length === 0 ? (\r\n        <p>No notifications found.</p>\r\n      ) : (\r\n        <ul className=\"notification-list\">\r\n          {notifications.map((n) => {\r\n            const isRead = n.readBy?.includes(uid);\r\n            return (\r\n              <li\r\n                key={n.id}\r\n                className={`notification-item ${isRead ? 'read' : 'unread'}`}\r\n                onClick={() => !isRead && markAsRead(n.id)}\r\n              >\r\n                <span className=\"icon\">{typeIcons[n.type] || 'üì©'}</span>\r\n                <div className=\"content\">\r\n                  <p className=\"title\">{n.title}</p>\r\n                  <p className=\"message\">{n.message}</p>\r\n                  <span className=\"timestamp\">\r\n                    {new Date(n.timestamp).toLocaleString()}\r\n                  </span>\r\n                </div>\r\n                {!isRead && <span className=\"badge\">‚óè</span>}\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notifications;\r\n"],"names":["typeIcons","rent","bill","receipt","notice","alert","Notifications","notifications","setNotifications","useState","loading","setLoading","uid","setUid","useEffect","async","user","auth","currentUser","q","query","collection","db","where","orderBy","data","getDocs","docs","map","doc","_objectSpread","id","err","console","error","fetchNotifications","_jsxs","className","children","_jsx","length","n","_n$readBy","isRead","readBy","includes","concat","onClick","notifRef","notificationId","updateDoc","arrayUnion","prev","markAsRead","type","title","message","Date","timestamp","toLocaleString"],"sourceRoot":""}